---
layout: post
title: "리엑트 공부하기- 00번째 시간; 컴포넌트가 뭔데"
---

# 오늘은 리엑트 명령어를 정리해볼거임

### 소주제는 컴포넌트임

### 컴포넌트란 쉽게 말해 건담의 특정 파츠 같은거임 

뭔말이냐. 

내가 멋진 건담을 만들때 그 건담을 이루고 있는 팔이나 다리, 총, 날개, 얼굴 같은게 컴포넌트임

내가 어떤 외형의 건담을 만들고 싶은지에 따라 그에 사용되는 파츠들이 다를 것임 

자 이제 비유를 웹사이트에 붙여서 이야기하자면

내가 만들고 싶은 웹사이트의 종류( 자사몰, 블로그, 커뮤니티 등)에 따라 필요한 컴포넌트가 다름.
(뭐 물론 일부 겹치는건 있겠지.)

암튼 다시 비유로 돌아가서,

내가 만들고 싶은 건담의 외형에 맞게 파츠들을 준비한 뒤에 이를 잘 끼워맞추고 
기름칠(연결해주는 코드작업)해주면!

건담이 잘 움직일거임

그럼 이제 두가지 의문이 드는데 

첫번째로, 왜 이렇게 파츠로 나눠서 만들어? 그냥 통으로 한번에 뚝딱 만들면 되지않아?
라는 것과

두번째로, 그럼 이렇게 파츠로 만들고 한번 쓰고 버리는거? 
라는 첫번째 의문에 꼬리를 물고 궁금증이 생김

안생기면 말고.


암튼 첫번째에 대해 이야기해보겠

왜 파츠로 나눠서 건담을 만드냐. 
### 1. 교체하기 편하니까.

조금더 멋있게 말하면, 
객체지향적으로 구현해놓으면 유지보수성과 확장성이 좋으니까 라고 할 수 있음

예를 들어보자.

 이쁜 건담을 만들어서 사람들에게 보여줬어 그렇게 자랑하던중에 실수로 건담의 팔을 부러뜨렸네?

 그러면 이제팔 부분의 파츠를 교체해주기만 하면 되는거

 또 만약에 내가 건담의 손에 광선검을 들게 하고 싶어. 
 
 이런 상황에서 건담을 통으로 만들었다면 
 처음부터 다시 손에 광선검을 들고 있는 형태로 만들어야하는거

 그런데 똑똑하게 이런 상황을 미리 예측하고 파츠로 만들어 놓았다면!?

 팔 부분만 이제 광선검을 들 수 있는 손 파츠를 추가해서 만들면 되는거임

 이렇게 유지보수성(망가진거 새걸로 바꾸기), 확장성(광선검 들려주기)이 좋기 때문에 쓰는거임

 이 비유를 실제 개발로 옮겨 보면.

 웹페이지를 만들어서 배포까지했는데 어떤 오류가 발생했거나 취약점이 발견된 경우

 급히 수정을 해야하는데 이런 경우 통으로 만들어놓았다면 어디서 문제가 터졌는지 알기 힘듦

 또 내가 추가하고 싶은 기능이 생겼는데 만약 통으로 만들어놨다면 어디를 어떻게 추가해야 문제가없이

 안정적으로 돌아갈지 알기 쉽지않음

### 2. 역할분담이 명확함
이 장점도 사실 1번에 연장선상임

내가 파츠들을 만들어놓고 이를 조립하는 식으로 만들면 

페이지마다 혹은 컴포넌트마다 권한 할당을 조금더 명확히 해줄 수 있음

그 권한을 부여한 혹은 특정 행위를 제한하는 걸 미리 해당하는 컴포넌트에 적용해 놓으면 되니까 말야

좀더 구체적으로 예시를 들어보자

통으로 만든다면 하나의 파일에서 혹은 하나의 페이지에서 로그인한 유저와 비로그인유저
(줄여서 유저와 게스트로 하겠듬)

사이의 권한 분할을 하기가 귀찮을 거임 어디부터 어디까지는 비로그인유저는 접근못해! 이런게 
양이 많아지고 다양해지면 귀찮지 

근데 이때 컴포넌트, 파츠 붙이는 식으로 구현한다면 파츠마다 내부에서 지정하면됨

'''
넌 유저만 접근 할수 있어.

만약 게스트가 들어오면 홈으로 쳐내
'''
같이 말이야

### 3. 그외
이거말고도 보안적으로 이점이 많을거고 

협업에 있어서 공간 분할과 역할분담도 좋을거고 
(github 브런치로 협업하면 머지할때 '서로 다른 컴포넌트를 다른 파일에서 개발하면' 충돌안날듯)

암튼 장점이 많음

# 하지만 단점도 있다
뭐 일단 대표적으로 원래 리엑트 안쓰는 사람이 보면 이게 뭔코드야 하는

- 진입장벽도 생길거고

- 컴포넌트를 쓰면서 오히려 코드의 추상화가 너무 많이일어난 경우도 있을수 있고

- 컴포넌트화 해줄 필요없을거 같은데, 많이 재활용이 안될거 같은데 과하게 컴포넌트화해서 
코드가 난해해진 경우도 있을수있음


암튼 이것들은 내일 정리해보겠음
그래서 내일은 "두번째, 컴포넌트는 한번쓰고 버려지는가?"(물론 말하는걸로 보아 아니라는걸 알겠지만)
와 함께 컴포넌트의 라이프 사이클
그리고 컴포넌트 형식의 단점? 같은것도 정리해보고자함

# 끝
